diff --git a/prj/textformats/src/textformats/types/specification.nim b/prj/textformats/src/textformats/types/specification.nim
index a788dcd..0cc6a78 100644
--- a/prj/textformats/src/textformats/types/specification.nim
+++ b/prj/textformats/src/textformats/types/specification.nim
@@ -6,6 +6,12 @@ export pairs
 type
   Specification* = TableRef[string, DatatypeDefinition]
 
+import msgpack4nim, streams
+
+#proc load_specification*(filename: string): Specification =
+#  var s = newFileStream(filename, fmRead)
+#  s.unpack(result)
+
 proc restore_references(dd: DatatypeDefinition, spec: Specification) =
   if dd.kind == ddkRef:
     dd.target = spec[dd.target_name]
@@ -21,23 +27,32 @@ proc remove_references*(dd: DatatypeDefinition) =
     for sub in dd.children:
       sub.remove_references
 
-proc save_specification*(table: Specification, filename: string) =
+proc save_specification*(table: Specification, filename: string,
+                        msgpack = true) =
   try:
     for name, dd in table:
       dd.remove_references
-    filename.writeFile($$table)
+    if msgpack:
+      var s = newFileStream(filename, fmWrite)
+      s.pack(table)
+    else:
+      filename.writeFile($$table)
   except IOError:
     let e = get_current_exception()
     raise newException(TextformatsRuntimeError,
                        &"Error while saving specification file '{filename}'\n" &
                        e.msg)
 
-proc load_specification*(filename: string): Specification =
+proc load_specification*(filename: string, msgpack = true): Specification =
   let errmsg_pfx = "Error loading preprocessed specification\n" &
                    &"  Filename: '{filename}'\n"
   try:
-    let filecontent = filename.readFile()
-    result = filecontent.to[:Specification]
+    if msgpack:
+      var s = newFileStream(filename, fmRead)
+      s.unpack(result)
+    else:
+      let filecontent = filename.readFile()
+      result = filecontent.to[:Specification]
     for name, dd in result:
       dd.restore_references(result)
     return
